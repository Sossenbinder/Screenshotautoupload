using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Screenshotautoupload
{
    class ScreenshotCreator
    {
        [DllImport("user32.dll")]
        static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll", SetLastError = true)]
        static extern bool GetWindowRect(IntPtr hWnd, out Rect lpRect);

        [StructLayout(LayoutKind.Sequential)]
        private struct Rect
        {
            public int Left;
            public int Top;
            public int Right;
            public int Bottom;
        }

        public string makeScreenshot()
        {
            DateTime timenow = DateTime.Now;
            string picturePath = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
            string pictureFolderPath = Path.Combine(picturePath,@"Autogenerated_Screenshots");
            string filename = "";

            Bitmap bitmap = createBitmap();

            filename = timenow.Hour + "_" + timenow.Minute + "_" + timenow.Second + "__" + timenow.Month + "_" + timenow.Day + ".png";
            System.IO.Directory.CreateDirectory(pictureFolderPath);
            bitmap.Save(Path.Combine(pictureFolderPath, filename));

            return Path.Combine(pictureFolderPath,filename);
        }

        private Bitmap createBitmap()
        {
            Rectangle bounds = new Rectangle();
            Rect rect = new Rect();

            GetWindowRect(GetForegroundWindow(), out rect);

            bounds.X = rect.Left + 7;
            bounds.Y = rect.Right - 7;
            bounds.Width = bounds.Y - bounds.X;
            bounds.Height = rect.Bottom - 7 - rect.Top;

            Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);

            using (Graphics g = Graphics.FromImage(bitmap))
            {
                g.CopyFromScreen(new Point(bounds.X, rect.Top),
                                                Point.Empty,
                                                bounds.Size);
            }

            return bitmap;
        }

        public string convertToBase64(Bitmap image){
                
            string imagebase64;

            using(MemoryStream mstream = new MemoryStream()){
                image.Save(mstream, ImageFormat.Bmp);
                imagebase64 = Convert.ToBase64String(mstream.ToArray());
            }

            return imagebase64;
        }
    }
}
